using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Net;
using UnityEditor;
using UnityEngine;

namespace Kaki_AssetBundleBuilder
{
    public class K_BundleTools
    {
        public static string mBundleModuleEnumFilePath =
            Application.dataPath + "/AssetBundleBuilder/Config/BundleModuleEnum.cs";

        [MenuItem("Kaki_ABBuild/GenerateBundleModuleEnum")]
        public static void GenerateBundleModuleEnum()
        {
            string namespeceName = "Kaki_AssetBundleBuilder";
            string className = "K_BundleModuleEnum";
            if (File.Exists(mBundleModuleEnumFilePath))
            {
                File.Delete(mBundleModuleEnumFilePath);
                AssetDatabase.Refresh();
            }

            var write = File.CreateText(mBundleModuleEnumFilePath);
            write.WriteLine("/* -----------------------------------------------");
            write.WriteLine("/* This file is generated by K_BundleTools.cs");
            write.WriteLine("/* Author: Kaki");
            write.WriteLine("/* Date:" + System.DateTime.Now);
            write.WriteLine("/* ----------------------------------------------- */");

            write.WriteLine($"namespace {namespeceName}");
            write.WriteLine("{");
            List<K_BundleMoudleData> moudleDatas = K_BuildBundleConfig.Instance.assetBundleConfig;
            if (moudleDatas == null || moudleDatas.Count == 0)
                return;
            write.WriteLine("\t" + $"public enum {className}");
            write.WriteLine("\t" + "{");
            write.WriteLine("\t\tNone,");
            for (int i = 0; i < moudleDatas.Count; i++)
            {
                write.WriteLine("\t\t" + moudleDatas[i].moduleNmae + ",");
            }

            write.WriteLine("\t" + "}");
            write.WriteLine("}");
            write.Close();
            AssetDatabase.Refresh();
        }
    }
}